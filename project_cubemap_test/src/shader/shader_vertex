
#version 330 core

layout (location = 0) in vec3 aPos;			// 顶点数据中的顶点坐标
layout (location = 1) in vec2 aTexCoord;	// 
layout (location = 2) in vec3 aNormal;		// 顶点数据中的纹理坐标

uniform mat4 modelMatrix;					// 模型变换矩阵
uniform mat4 viewMatrix;					// 视图变换矩阵
uniform mat4 projectionMatrix;				// 投影变换矩阵
uniform int	 task;

out vec2 outTexCoord2D;
out vec3 outTexCoordCube;
out vec3 outColor;	
out vec3 outNormal;	
out vec3 fragPos;				

//enum SHADER_TASK
//{
//    TASK_COORD = 0,
//    TASK_CUBE,
//    TASK_SKY,
//	  TASK_REFLECT,
//	  TASK_REFLECT_MODEL,
//    TASK_REFRACT_MODEL,
//    TASK_END
//};

void main()	
{
	if(task == 0)
	{
		outColor    = vec3(aPos.x != 0 ? 1.0 : 0.0, 
						   aPos.y != 0 ? 1.0 : 0.0,
						   aPos.z != 0 ? 1.0 : 0.0);
		gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);	
	}
	else if(task == 1)
	{
		outTexCoord2D = vec2(1.0 - aTexCoord.x, 1.0 - aTexCoord.y);
		gl_Position   = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);	
	}
	else if(task == 2)
	{
		outTexCoordCube = aPos;
		gl_Position     = projectionMatrix * viewMatrix * vec4(aPos, 1.0);	
		gl_Position     = gl_Position.xyww;
	}
	else if(task == 3)
	{
		outNormal     = mat3(transpose(inverse(modelMatrix))) * aNormal;
		fragPos		  = vec3(modelMatrix * vec4(aPos, 1.0));
		outTexCoord2D = vec2(1.0 - aTexCoord.x, 1.0 - aTexCoord.y);
		gl_Position   = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);
	}
	else if(task == 4 || task == 5)
	{
		outNormal     = mat3(transpose(inverse(modelMatrix))) * aNormal;
		fragPos		  = vec3(modelMatrix * vec4(aPos, 1.0));
		outTexCoord2D = vec2(1.0 - aTexCoord.x, 1.0 - aTexCoord.y);
		gl_Position   = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);
	}
};