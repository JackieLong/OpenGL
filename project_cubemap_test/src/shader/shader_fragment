#version 330 core

in vec2 outTexCoord2D;
in vec3 outTexCoordCube;
in vec3 outColor;
in vec3 outNormal;	
in vec3 fragPos;	

uniform sampler2D   texture0;
uniform samplerCube textureCube0;
uniform sampler2D   texture_diffuse0;
uniform int		    task;
uniform vec3		viewPos;

out vec4 FragColor;

//enum SHADER_TASK
//{
//    TASK_COORD = 0,
//    TASK_CUBE,
//    TASK_SKY,
//	  TASK_REFLECT,
//	  TASK_REFLECT_MODEL,
//    TASK_REFRACT_MODEL,
//    TASK_END
//};

const float refract_air   = 1.00;	// 光在空气中的折射率
const float refract_glass = 1.52;	// 光在玻璃中的折射率
const float ratio		  = refract_air / refract_glass;	// 光从空气射入玻璃时的折射率

void main()
{
	if(task == 0)
	{
		FragColor = vec4(outColor, 1.0);
	}
	else if(task == 1)
	{
		FragColor = texture(texture0, outTexCoord2D);
	}
	else if(task == 2)
	{
		FragColor = texture(textureCube0, outTexCoordCube);
	}
	else if(task == 3)
	{
		FragColor = texture(textureCube0, reflect(normalize(fragPos - viewPos), normalize(outNormal)));
	}
	else if(task == 4)
	{
		FragColor = texture(textureCube0, reflect(normalize(fragPos - viewPos), normalize(outNormal)));
	}
	else if(task == 5)
	{
		FragColor = texture(textureCube0, refract(normalize(fragPos - viewPos), normalize(outNormal), ratio));
	}
};