
#version 330 core

layout (location = 0) in vec3 aPos;			// 顶点坐标
layout (location = 1) in vec3 aNormal;		// 顶点法向量

uniform mat4 modelMatrix;					// 模型变换矩阵
uniform mat4 viewMatrix;					// 视图变换矩阵
uniform mat4 projectionMatrix;				// 投影变换矩阵

uniform vec3 lightColor;					// 光源颜色
uniform vec3 objectColor;					// 物体本身颜色(珊瑚红)

uniform vec3 lightPos;						// 光源位置
uniform vec3 viewPos;						// 观察点位置

uniform int caculateType;					// 

out vec3 normal;							// 单位法向量
out vec3 fragPos;							// 顶点在世界坐标系中的位置

out vec3 normalView;
out vec3 fragPosView;
out vec3 lightPosView;

out vec3 lightColorInVS;

void main()	
{
	// 如果是列向量则按以下乘法顺序，OpenGL使用的是列向量。
	gl_Position  = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);

	if(caculateType == 1){
		normal       = mat3(transpose(inverse(modelMatrix))) * aNormal;
		fragPos      = vec3(modelMatrix * vec4(aPos,1.0));
	}
	else if(caculateType == 2){
		normalView   = mat3(transpose(inverse(viewMatrix * modelMatrix))) * aNormal;
		fragPosView  = vec3(viewMatrix * modelMatrix * vec4(aPos,1.0));
		lightPosView = vec3(viewMatrix * modelMatrix * vec4(lightPos,1.0));
	}
	else if(caculateType == 3){
		normal       = mat3(transpose(inverse(modelMatrix))) * aNormal;
		fragPos      = vec3(modelMatrix * vec4(aPos,1.0));

		float ambientFactor    = 0.1;							// 常量环境因子
		float specularStrength = 0.5;							// 镜面强度
		int   Shininess        = 32;							// 反光度，越高反射光能力越强，高光点越小

		// ***************计算环境光照分量*******************************************
		//
		vec3 ambient = ambientFactor * lightColor;							

		// ***************计算漫反射光照分量*****************************************
		//
		vec3 diff = max(										// 忽略负值
						dot(									// 单位向量点乘：计算法向量和光照之间的余弦值
							normalize( normal ),				// 顶点单位法向量
							normalize( lightPos - fragPos)),	// 光照向量：光源和顶点组成的向量
						 0.0)
					*lightColor;
	
		// ***************计算镜面反射光照分量***************************************
		//
		float spec = pow(
						max(									// 忽略负值
							dot(								// 单位向量点乘求余弦：反射向量与眼睛到顶点的向量
								normalize(						// 光照反射向量的基向量
									reflect(					// 计算反射向量（光的反射）
											fragPos - lightPos,	// 入射向量（光照向量）：顶点坐标 - 光源位置
											normal)),			// 顶点法向量
								normalize(viewPos - fragPos)),	// 顶点到观察点（眼睛）的基向量
							0.0),
						Shininess);								// 反光度的作用
		vec3 specular = specularStrength * spec * lightColor;

		// 计算最终颜色
		lightColorInVS = ambient + diff + specular;
	}
};