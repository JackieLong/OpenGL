#version 330 core

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform int enableExplode;

in vec2 texCoord[];
in vec3 outNormal[];

uniform float time;

out vec2 outTexCoord;

vec4 explode(vec4 pos, vec3 normal);
vec3 triangleNormal(); 

void main() {

	vec3 normal = triangleNormal();

	gl_Position = explode(vec4(gl_in[0].gl_Position), normal);
	outTexCoord = texCoord[0];
	EmitVertex();
	
	gl_Position = explode(vec4(gl_in[1].gl_Position), normal);
	outTexCoord = texCoord[1];
	EmitVertex();
	
	gl_Position = explode(vec4(gl_in[2].gl_Position), normal);
	outTexCoord = texCoord[2];
	EmitVertex();

	EndPrimitive();
}

vec4 explode(vec4 pos, vec3 normal)
{
	if(enableExplode == 1)
	{
		return pos + vec4(normal * ((1.0 + sin(time)) / 2.0), 0.0);
	}
	else
	{
		return pos;
	}
}

vec3 triangleNormal()
{
	vec3 fuck1 = vec3(gl_in[0].gl_Position - gl_in[1].gl_Position);
	vec3 fuck2 = vec3(gl_in[2].gl_Position - gl_in[1].gl_Position);
	return normalize(cross(fuck1, fuck2));
}