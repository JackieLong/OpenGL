#version 330 core

in vec2 outTexCoord;
in vec3 outColor;

uniform sampler2D texture0;
uniform int		  task;

out vec4 FragColor;

//enum SHADER_TASK
//{
//    TASK_COORD = 0,
//    TASK_OBJECT,
//    TASK_SCREEN,
//    TASK_EFFECT_REVERSE,				// 反相
//    TASK_EFFECT_GRAY_SCALE,			// 灰度
//	  TASK_EFFECT_GRAY_SCALE_WEIGHT,	// 加权灰度
//	  TASK_EFFECT_KERNEL,				// 核效果
//	  TASK_EFFECT_BLUR,				    // 模糊
//	  TASK_EFFECT_EDGE_DETECTION,       // 边缘检测
//    TASK_END
//};

const float offset = 1.0 / 300.0;  

void main()
{
	if( task == 0 )
	{
		FragColor = vec4(outColor, 1.0);
	}
	else if(task == 1)
	{
		FragColor = texture(texture0, outTexCoord);
	}
	else if(task == 2)
	{
		FragColor = vec4(texture(texture0, outTexCoord).rgb, 1.0);
	}
	else if(task == 3)
	{
		FragColor = vec4(vec3(1.0 - texture(texture0, outTexCoord)), 1.0);
	}
	else if(task == 4)
	{
		FragColor     = texture(texture0, outTexCoord);
		float average = (FragColor.r + FragColor.g + FragColor.b) / 3.0;
		FragColor     = vec4(vec3(average), 1.0);
	}
	else if(task == 5)
	{
		FragColor     = texture(texture0, outTexCoord);
		float average = 0.2126 * FragColor.r + 0.7152 * FragColor.g + 0.0722 * FragColor.b;
		FragColor     = vec4(vec3(average), 1.0);
	}
	else if(task == 6)
	{
		vec2 offsets[9] = vec2[](
			vec2(-offset,  offset),		// 左上
			vec2( 0.0,     offset),		// 正上
			vec2( offset,  offset),		// 右上
			vec2(-offset,  0.0),		// 左
			vec2( 0.0,     0.0),		// 中
			vec2( offset,  0.0),		// 右
			vec2(-offset, -offset),		// 左下
			vec2( 0.0,    -offset),		// 正下
			vec2( offset, -offset)		// 右下
		);

		float kernel[9] = float[](
			-1, -1, -1,
			-1,  9, -1,
			-1, -1, -1
		);

		vec3 sampleTex[9];
		for(int i = 0; i < 9; i++)
		{
			sampleTex[i] = vec3(texture(texture0, outTexCoord.st + offsets[i]));
		}

		vec3 color = vec3(0.0);
		for(int i = 0; i < 9; i++)
			color += sampleTex[i] * kernel[i];

		FragColor = vec4(color, 1.0);
	}
	else if(task == 7)
	{
		vec2 offsets[9] = vec2[](
			vec2(-offset,  offset),		// 左上
			vec2( 0.0,     offset),		// 正上
			vec2( offset,  offset),		// 右上
			vec2(-offset,  0.0),		// 左
			vec2( 0.0,     0.0),		// 中
			vec2( offset,  0.0),		// 右
			vec2(-offset, -offset),		// 左下
			vec2( 0.0,    -offset),		// 正下
			vec2( offset, -offset)		// 右下
		);

		const float tmpBlur = 5.0;
		float kernel[9] = float[](
			-1.0 / tmpBlur,		-1.0 / tmpBlur,		-1.0 / tmpBlur,
			-1.0 / tmpBlur,		9.0  / tmpBlur,		-1.0 / tmpBlur,
			-1.0 / tmpBlur,		-1.0 / tmpBlur,		-1.0 / tmpBlur
		);

		vec3 sampleTex[9];
		for(int i = 0; i < 9; i++)
		{
			sampleTex[i] = vec3(texture(texture0, outTexCoord.st + offsets[i]));
		}

		vec3 color = vec3(0.0);
		for(int i = 0; i < 9; i++)
			color += sampleTex[i] * kernel[i];

		FragColor = vec4(color, 1.0);
	}
	else if(task == 8)
	{
		vec2 offsets[9] = vec2[](
			vec2(-offset,  offset),		// 左上
			vec2( 0.0,     offset),		// 正上
			vec2( offset,  offset),		// 右上
			vec2(-offset,  0.0),		// 左
			vec2( 0.0,     0.0),		// 中
			vec2( offset,  0.0),		// 右
			vec2(-offset, -offset),		// 左下
			vec2( 0.0,    -offset),		// 正下
			vec2( offset, -offset)		// 右下
		);

		const float tmpBlur = 1.0;
		float kernel[9] = float[](
			1.0 / tmpBlur,		1.0 / tmpBlur,		1.0 / tmpBlur,
			1.0 / tmpBlur,		-8  / tmpBlur,		1.0 / tmpBlur,
			1.0 / tmpBlur,		1.0 / tmpBlur,		1.0 / tmpBlur
		);

		vec3 sampleTex[9];
		for(int i = 0; i < 9; i++)
		{
			sampleTex[i] = vec3(texture(texture0, outTexCoord.st + offsets[i]));
		}

		vec3 color = vec3(0.0);
		for(int i = 0; i < 9; i++)
			color += sampleTex[i] * kernel[i];

		FragColor = vec4(color, 1.0);
	}
};