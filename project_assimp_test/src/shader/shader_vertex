#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoords;

out vec2 texCoord;
out vec3 fragPos;
out vec3 normal;

uniform mat4 modelMatrix;					// 模型变换矩阵
uniform mat4 viewMatrix;					// 视图变换矩阵
uniform mat4 projectionMatrix;				// 投影变换矩阵

void main()
{
	// 如果是列向量则按以下乘法顺序，OpenGL使用的是列向量。
	gl_Position  = projectionMatrix * viewMatrix * modelMatrix * vec4(aPos, 1.0);
    texCoord     = aTexCoords;    
	fragPos      = vec3(modelMatrix * vec4(aPos, 1.0));
	normal       = normalize(mat3(transpose(inverse(modelMatrix))) * aNormal);
}