#version 330 core

out     vec4 FragColor;

uniform vec3 viewPos;			// 观察点位置
uniform int  lightType;			// 光源类型

in      vec3 normal;			// 顶点法向量
in      vec3 fragPos;			// 顶点世界坐标
in      vec2 texCoord;

struct Material{				// 物体的材质属性：为每个冯氏光照模型的分量定义一个颜色分量
	sampler2D diffuse;			// 在漫反射光照下物体的颜色
	sampler2D specular;			// 镜面光照对物体颜色的影响
	sampler2D glow;				// 放射光贴图
	float     shininess;		// 反光度，影响镜面高光的散射/半径
};

struct DirLight{				// 平行光（定向光），如太阳光。
	vec3 dir;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight{				// 点光源
	vec3  pos;
	
	vec3  ambient;
	vec3  diffuse;
	vec3  specular;

	float constant;				// 常数项
	float linear;				// 一次项
	float quadratic;			// 二次项
};

struct SpotLight{				// 聚光（手电筒）
	vec3  pos;					// 灯源位置
	vec3  dir;					// 光射向
	float cutoff;				// 切光角的余弦值
	float cutoff1;				// 比切光角更大一点的角的余弦值

	vec3  ambient;
	vec3  diffuse;
	vec3  specular;
};

#define COUNT_POINT_LIGHTS 4

uniform Material                       material;
uniform DirLight                       sunLight;
uniform PointLight[COUNT_POINT_LIGHTS] pointLights;
uniform SpotLight                      spotLight;

vec3 calDirLight(DirLight light, vec3 normal, vec3 viewPos, vec3 fragPos);
vec3 calPointLight(PointLight light, vec3 normal, vec3 viewPos, vec3 fragPos);
vec3 calSpotLight(SpotLight light, vec3 normal, vec3 viewPos, vec3 fragPos);

void main()
{
	vec3 outColor;

	outColor = calDirLight(sunLight, normal, viewPos, fragPos);

	for(int i = 0; i < COUNT_POINT_LIGHTS; i++){
		outColor += calPointLight(pointLights[i], normal, viewPos, fragPos);
	}

	outColor += calSpotLight(spotLight, normal, viewPos, fragPos);

	FragColor = vec4(outColor, 1.0);
	
};

vec3 calDirLight(DirLight light, vec3 normal, vec3 viewPos, vec3 fragPos)
{
	// ***************计算环境光照分量*******************************************
	//
	vec3 ambient  = (light.ambient * vec3(texture(material.diffuse, texCoord)));							

	// ***************计算漫反射光照分量*****************************************
	//
	float diff    = max(										// 忽略负值
						dot(									// 单位向量点乘：计算法向量和光照之间的余弦值
							normalize( normal ),				// 顶点单位法向量
							normalize( -light.dir)),			// 光照向量：光源和顶点组成的向量
							0.0);
	vec3 diffuse  = light.diffuse * (diff * vec3(texture(material.diffuse, texCoord)));
	
	// ***************计算镜面反射光照分量***************************************
	//
	float spec    = pow(
					max(										// 忽略负值
						dot(									// 单位向量点乘求余弦：反射向量与眼睛到顶点的向量
							normalize(							// 光照反射向量的基向量
								reflect(						// 计算反射向量（光的反射）
										light.dir,			// 入射向量（光照向量）：顶点坐标 - 光源位置
										normal)),				// 顶点法向量
							normalize(viewPos - fragPos)),		// 顶点到观察点（眼睛）的基向量
						0.0),
					material.shininess);						// 反光度的作用
	vec3 specular = light.specular * (spec * vec3(texture(material.specular, texCoord)));	// 铁框高亮

	return ambient + diffuse + specular;
};

vec3 calPointLight(PointLight light, vec3 normal, vec3 viewPos, vec3 fragPos)
{
	// ***************计算环境光照分量*******************************************
	//
	vec3 ambient  = (light.ambient * vec3(texture(material.diffuse, texCoord)));							

	// ***************计算漫反射光照分量*****************************************
	//
	float diff    = max(											// 忽略负值
						dot(										// 单位向量点乘：计算法向量和光照之间的余弦值
							normalize( normal ),					// 顶点单位法向量
							normalize( light.pos - fragPos)),	// 光照向量：光源和顶点组成的向量
							0.0);
	vec3 diffuse  = light.diffuse * (diff * vec3(texture(material.diffuse, texCoord)));
	
	// ***************计算镜面反射光照分量***************************************
	//
	float spec    = pow(
					max(											// 忽略负值
						dot(										// 单位向量点乘求余弦：反射向量与眼睛到顶点的向量
							normalize(								// 光照反射向量的基向量
								reflect(							// 计算反射向量（光的反射）
										fragPos - light.pos,	// 入射向量（光照向量）：顶点坐标 - 光源位置
										normal)),					// 顶点法向量
							normalize(viewPos - fragPos)),			// 顶点到观察点（眼睛）的基向量
						0.0),
					material.shininess);							// 反光度的作用
	vec3 specular = light.specular * (spec * vec3(texture(material.specular, texCoord)));	// 铁框高亮

	float distance = length(light.pos - fragPos);
	float attenuation = 1.0 / ( light.constant +
								light.linear * distance + 
								light.quadratic * distance * distance
								);
	return (ambient + diffuse + specular) * attenuation;
};


vec3 calSpotLight(SpotLight spotLight, vec3 normal, vec3 viewPos, vec3 fragPos)
{
	float theta = dot(normalize(fragPos - spotLight.pos), normalize(spotLight.dir));
	float epsilon = spotLight.cutoff - spotLight.cutoff1;
	float intensity = clamp((theta - spotLight.cutoff1)/epsilon, 0.0, 1.0);

	// ***************计算环境光照分量*******************************************
	//
	vec3 ambient  = (spotLight.ambient * vec3(texture(material.diffuse, texCoord)));							

	// ***************计算漫反射光照分量*****************************************
	//
	float diff    = max(											// 忽略负值
						dot(										// 单位向量点乘：计算法向量和光照之间的余弦值
							normalize( normal ),					// 顶点单位法向量
							normalize( spotLight.pos - fragPos)),	// 光照向量：光源和顶点组成的向量
							0.0);
	vec3 diffuse  = intensity * spotLight.diffuse * (diff * vec3(texture(material.diffuse, texCoord)));
	
	// ***************计算镜面反射光照分量***************************************
	//
	float spec    = pow(
					max(											// 忽略负值
						dot(										// 单位向量点乘求余弦：反射向量与眼睛到顶点的向量
							normalize(								// 光照反射向量的基向量
								reflect(							// 计算反射向量（光的反射）
										fragPos - spotLight.pos,	// 入射向量（光照向量）：顶点坐标 - 光源位置
										normal)),					// 顶点法向量
							normalize(viewPos - fragPos)),	// 顶点到观察点（眼睛）的基向量
						0.0),
					material.shininess);							// 反光度的作用
	vec3 specular = intensity * spotLight.specular * (spec * vec3(texture(material.specular, texCoord)));	// 铁框高亮

	return ambient + diffuse + specular;
};